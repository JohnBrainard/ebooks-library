val ktor_version: String by project
val kotlin_version: String by project
val logback_version: String by project
val react_wrapper_version: String by project

plugins {
	application
	kotlin("multiplatform") version "1.5.31"
	kotlin("plugin.serialization") version "1.5.31"
}

group = "dev.johnbrainard.ebooks"
version = "0.0.1"

application {
	mainClass.set("dev.johnbrainard.ebooks.api.ApplicationKt")
}

repositories {
	maven("https://dl.bintray.com/kotlin/kotlin-eap")
	mavenCentral()
}

kotlin {
	jvm {
		withJava()
	}
	js {
		browser {
			binaries.executable()
		}
	}

	sourceSets {
		val jvmMain by getting {
			dependencies {
				implementation("io.ktor:ktor-server-core:$ktor_version")
				implementation("io.ktor:ktor-server-netty:$ktor_version")
				implementation("io.ktor:ktor-utils:$ktor_version")
				implementation("io.ktor:ktor-jackson:$ktor_version")
				implementation(project(":ebooks-library-core"))
				implementation("ch.qos.logback:logback-classic:$logback_version")
			}
		}

		val jsMain by getting {
			dependencies {
				implementation("io.ktor:ktor-client-js:$ktor_version")
				implementation("io.ktor:ktor-client-json:$ktor_version")
				implementation("io.ktor:ktor-client-serialization:$ktor_version")

				implementation("org.jetbrains.kotlin-wrappers:kotlin-react:$react_wrapper_version")
				implementation("org.jetbrains.kotlin-wrappers:kotlin-react-dom:$react_wrapper_version")
			}
		}
	}
}

application {
	mainClass.set("dev.johnbrainard.ebooks.api.ApplicationKt")
}

tasks.getByName<Jar>("jvmJar") {
	val taskName = if (project.hasProperty("isProduction")) {
		"jsBrowserProductionWebpack"
	} else {
		"jsBrowserDevelopmentWebpack"
	}
	val webpackTask = tasks.getByName<org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack>(taskName)
	dependsOn(webpackTask) // make sure JS gets compiled first
	from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
}

distributions {
	main {
		contents {
			from("$buildDir/libs") {
				rename("${rootProject.name}-jvm", rootProject.name)
				into("lib")
			}
		}
	}
}

tasks.getByName<JavaExec>("run") {
	classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}
